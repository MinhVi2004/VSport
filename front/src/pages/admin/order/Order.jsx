import { useEffect, useState } from 'react';
import axiosInstance from '../../../utils/axios';
import { useNavigate } from 'react-router-dom';

const OrderPage = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(false);
    const [statusFilter, setStatusFilter] = useState('T·∫•t c·∫£');
    const navigate = useNavigate();
    const [isPaidFilter, setIsPaidFilter] = useState('T·∫•t c·∫£');

    const statuses = [
        'T·∫•t c·∫£',
        'ƒêang x√°c nh·∫≠n',
        'ƒêang x·ª≠ l√Ω',
        'ƒêang v·∫≠n chuy·ªÉn',
        'ƒê√£ v·∫≠n chuy·ªÉn',
        'ƒê√£ h·ªßy',
    ];

    useEffect(() => {
        const fetchOrders = async () => {
            setLoading(true);
            try {
                const res = await axiosInstance.get('api/order/admin');
                // console.log('fetchOrders res', res.data);
                setOrders(res.data);
            } catch (err) {
                console.error('L·ªói khi l·∫•y ƒë∆°n h√†ng:', err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchOrders();
    }, []);

    const filteredOrders = orders.filter(order => {
        const matchStatus =
            statusFilter === 'T·∫•t c·∫£' || order.status === statusFilter;
        const matchIsPaid =
            isPaidFilter === 'T·∫•t c·∫£' ||
            (isPaidFilter === 'true' && order.isPaid) ||
            (isPaidFilter === 'false' && !order.isPaid);
        return matchStatus && matchIsPaid;
    });

    // M√†u badge theo tr·∫°ng th√°i
    const getStatusBadge = status => {
        const base = 'text-xs font-medium px-2 py-1 rounded-full inline-block';
        switch (status) {
            case 'ƒêang x√°c nh·∫≠n':
                return `${base} bg-yellow-100 text-yellow-700`;
            case 'ƒêang x·ª≠ l√Ω':
                return `${base} bg-purple-100 text-purple-700`;
            case 'ƒêang v·∫≠n chuy·ªÉn':
                return `${base} bg-blue-100 text-blue-700`;
            case 'ƒê√£ v·∫≠n chuy·ªÉn':
                return `${base} bg-green-100 text-green-700`;
            case 'ƒê√£ h·ªßy':
                return `${base} bg-red-100 text-red-600`;
            default:
                return `${base} bg-gray-100 text-gray-700`;
        }
    };

    return (
        <div className="p-6 max-w-7xl mx-auto">
            <h1 className="text-3xl font-bold mb-6">üì¶ Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>

            {/* Filter */}
            <div className="mb-6 flex items-center gap-2">
                <label className="font-medium">L·ªçc theo tr·∫°ng th√°i:</label>
                <select
                    value={statusFilter}
                    onChange={e => setStatusFilter(e.target.value)}
                    className="px-3 py-2 border rounded-md shadow-sm"
                >
                    {statuses.map(s => (
                        <option key={s} value={s}>
                            {s}
                        </option>
                    ))}
                </select>
                <label className="font-medium ml-6">
                    Tr·∫°ng th√°i thanh to√°n:
                </label>
                <select
                    value={isPaidFilter}
                    onChange={e => setIsPaidFilter(e.target.value)}
                    className="px-3 py-2 border rounded-md shadow-sm"
                >
                    <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
                    <option value="true">ƒê√£ thanh to√°n</option>
                    <option value="false">Ch∆∞a thanh to√°n</option>
                </select>
            </div>

            {/* Table */}
            {loading ? (
                <p className="text-gray-500">ƒêang t·∫£i ƒë∆°n h√†ng...</p>
            ) : (
                <div className="overflow-x-auto rounded shadow">
                    <table className="w-full text-sm text-left border-collapse">
                        <thead className="bg-gray-100 text-gray-700 text-sm">
                            <tr>
                                <th className="px-4 py-3">M√£ ƒë∆°n</th>
                                <th className="px-4 py-3">Kh√°ch h√†ng</th>
                                <th className="px-4 py-3">T·ªïng ti·ªÅn</th>
                                <th className="px-4 py-3">Thanh to√°n</th>
                                <th className="px-4 py-3">Tr·∫°ng th√°i</th>
                                <th className="px-4 py-3">Ng√†y t·∫°o</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredOrders.length > 0 ? (
                                filteredOrders.map(order => (
                                    <tr
                                        key={order._id}
                                        className="border-b hover:bg-gray-50 cursor-pointer transition"
                                        onClick={() =>
                                            navigate(
                                                `/admin/order/${order._id}`
                                            )
                                        }
                                    >
                                        <td className="px-4 py-3 text-blue-600 font-medium">
                                            #{order._id.toUpperCase()}
                                        </td>
                                        <td className="px-4 py-3">
                                            {order.user?.name || 'N/A'}
                                        </td>
                                        <td className="px-4 py-3 text-black font-semibold">
                                            {order.totalAmount?.toLocaleString()}
                                            ‚Ç´
                                        </td>
                                        <td className="px-4 py-3">
                                            {order.isPaid ? (
                                                <span className="text-green-600 font-medium">
                                                    ƒê√£ thanh to√°n
                                                </span>
                                            ) : (
                                                <span className="text-red-500 font-medium">
                                                    Ch∆∞a thanh to√°n
                                                </span>
                                            )}
                                        </td>
                                        <td className="px-4 py-3">
                                            <span
                                                className={getStatusBadge(
                                                    order.status
                                                )}
                                            >
                                                {order.status}
                                            </span>
                                        </td>
                                        <td className="px-4 py-3 text-gray-600">
                                            {new Date(
                                                order.createdAt
                                            ).toLocaleDateString()}
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td
                                        colSpan="5"
                                        className="text-center py-6 text-gray-500 italic"
                                    >
                                        Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ph√π h·ª£p.
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
};

export default OrderPage;
